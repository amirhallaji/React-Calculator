{"version":3,"sources":["components/Key.js","components/Keypad.js","components/Screen.js","App.js","reportWebVitals.js","index.js"],"names":["Key","onClick","text","wide","blue","mem","className","join","Keypad","onPressDigit","onPressOperator","onPressResult","onPressAC","onPressNegator","onPressDot","onPressMemory","Screen","App","props","handlePressDigit","digit","setState","screenText","state","operatorClicked","resultClicked","toString","resultClickedOperand","handlePressOperator","operator","previousOperator","isPositive","dotAdded","slice","length","tempOprands","operands","parseFloat","result","push","handlePressAC","handlePressDot","handlePressNegator","handlePressResult","handleMemory","memory","onScreen","currentMemory","localStorage","getItem","lastMemoryKey","removeItem","isNaN","setItem","clear","memoryClicked","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e57c7cd2.chunk.js","sourcesContent":["const Key = ({ onClick, text, wide, blue, mem }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={[\"key\", wide && \"wide\", blue && \"blue\", mem && \"mem\"].join(\" \")}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Key;","import Key from \"./Key\";\r\n\r\nconst Keypad = ({\r\n  onPressDigit,\r\n  onPressOperator,\r\n  onPressResult,\r\n  onPressAC,\r\n  onPressNegator,\r\n  onPressDot,\r\n  onPressMemory,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <Key text={\"MC\"} mem onClick={() => onPressMemory('mc')} />\r\n        <Key text={\"MR\"} mem onClick={() => onPressMemory('mr')} />\r\n        <Key text={\"M+\"} mem onClick={() => onPressMemory('m+')} />\r\n        <Key text={\"M-\"} mem onClick={() => onPressMemory(\"m-\")} />\r\n        <Key text={\"MS\"} mem onClick={() => onPressMemory(\"ms\")} />\r\n\r\n      </div>\r\n      <div>\r\n        <Key text={\"AC\"} onClick={onPressAC} />\r\n        <Key text={\"+/-\"} onClick={onPressNegator} />\r\n        <Key text={\"%\"} onClick={() => onPressOperator(\"%\")} />\r\n        <Key text={\"/\"} blue onClick={() => onPressOperator(\"/\")} />\r\n      </div>\r\n      <div>\r\n        <Key text={\"7\"} onClick={() => onPressDigit(7)} />\r\n        <Key text={\"8\"} onClick={() => onPressDigit(8)} />\r\n        <Key text={\"9\"} onClick={() => onPressDigit(9)} />\r\n        <Key text={\"*\"} blue onClick={() => onPressOperator(\"*\")} />\r\n      </div>\r\n      <div>\r\n        <Key text={\"4\"} onClick={() => onPressDigit(4)} />\r\n        <Key text={\"5\"} onClick={() => onPressDigit(5)} />\r\n        <Key text={\"6\"} onClick={() => onPressDigit(6)} />\r\n        <Key text={\"-\"} blue onClick={() => onPressOperator(\"-\")} />\r\n      </div>\r\n      <div>\r\n        <Key text={\"1\"} onClick={() => onPressDigit(1)} />\r\n        <Key text={\"2\"} onClick={() => onPressDigit(2)} />\r\n        <Key text={\"3\"} onClick={() => onPressDigit(3)} />\r\n        <Key text={\"+\"} blue onClick={() => onPressOperator(\"+\")} />\r\n      </div>\r\n      <div>\r\n        <Key text={\"0\"} wide onClick={() => onPressDigit(0)} />\r\n        <Key text={\".\"} onClick={onPressDot} />\r\n        <Key text={\"=\"} blue onClick={onPressResult} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Keypad;\r\n","const Screen = ({ text }) => {\r\n  return <div className=\"screen\">{text}</div>;\r\n};\r\n\r\nexport default Screen;\r\n","import React from \"react\";\n\nimport Keypad from \"./components/Keypad\";\nimport Screen from \"./components/Screen\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      screenText: \"0\",\n      dotAdded: false,\n      isPositive: true,\n      previousOperator: null,\n      operands: [],\n      operatorClicked: false,\n      resultClickedOperand: null,\n      memoryClicked: false,\n      lastMemoryKey: null,\n      resultClicked: false,\n    };\n  }\n\n  // componentDidMount() {\n  //   console.log(\"******\");\n  //   console.log(this.state.previousOperator);\n  //   console.log(this.state.operands);\n  //   console.log(this.state.resultClickedOperand);\n  //   console.log(this.state.operatorClicked);\n  // }\n\n  // componentDidUpdate() {\n  //   console.log(\"******\");\n  //   console.log(this.state.previousOperator);\n  //   console.log(this.state.operands);\n  //   console.log(this.state.resultClickedOperand);\n  //   console.log(this.state.operatorClicked);\n  // }\n\n  handlePressDigit = (digit) => {\n    this.setState({\n      screenText:\n        this.state.screenText === \"0\" || this.state.operatorClicked || this.state.resultClicked\n          ? digit.toString()\n          : this.state.screenText + digit.toString(),\n      operatorClicked: false,\n      resultClickedOperand: null,\n      resultClicked: false,\n    });\n  };\n\n  handlePressOperator = (operator) => {\n    if (\n      !this.state.operatorClicked &&\n      this.state.resultClickedOperand === null\n    ) {\n      let tempOprands = [\n        ...this.state.operands,\n        parseFloat(this.state.screenText),\n      ];\n      let result = 0;\n\n      // if (operator === \"%\") {\n      //   let tempVal =\n      //     (tempOprands[tempOprands.length - 1] *\n      //       tempOprands[tempOprands.length - 2]) /\n      //     1000;\n      //   tempOprands[tempOprands.length - 1] = tempVal;\n      //   console.log('data1: ', tempOprands);\n      //   this.setState({\n      //     operands: tempOprands,\n      //     screenText: isNaN(tempVal.toString()) ? '0': tempVal.toString(),\n      //     previousOperator: this.state.previousOperator,\n      //     operatorClicked: true,\n      //   });\n      //   // this.handlePressOperator(this.state.previousOperator);\n      // } else {\n      if (tempOprands.length !== 1) {\n        switch (this.state.previousOperator) {\n          case \"+\":\n            result =\n              tempOprands[tempOprands.length - 2] +\n              tempOprands[tempOprands.length - 1];\n            break;\n          case \"-\":\n            result =\n              tempOprands[tempOprands.length - 2] -\n              tempOprands[tempOprands.length - 1];\n            break;\n          case \"*\":\n            result =\n              tempOprands[tempOprands.length - 2] *\n              tempOprands[tempOprands.length - 1];\n            break;\n          case \"/\":\n            result =\n              tempOprands[tempOprands.length - 2] /\n              tempOprands[tempOprands.length - 1];\n            break;\n          case '%':\n            result =\n              tempOprands[tempOprands.length - 2] %\n              tempOprands[tempOprands.length - 1];\n          default:\n            break;\n        }\n        tempOprands.push(result);\n      } else {\n        result = tempOprands[0];\n      }\n\n      this.setState({\n        previousOperator: operator,\n        operatorClicked: true,\n        operands: tempOprands,\n        isPositive: true,\n        dotAdded: false,\n        screenText:\n          tempOprands.length % 2 === 1\n            ? result.toString() + operator\n            : this.state.screenText.slice(\n              0,\n              this.state.screenText.length - 1\n            ) + operator,\n        resultClickedOperand: null,\n      });\n      // }\n    } else {\n      this.setState({\n        previousOperator: operator,\n        isPositive: true,\n        dotAdded: false,\n        screenText:\n          this.state.resultClickedOperand === null\n            ? this.state.screenText.slice(0, this.state.screenText.length - 1) +\n            operator\n            : this.state.screenText + operator,\n        resultClickedOperand: null,\n        operatorClicked: true,\n      });\n    }\n  };\n\n  handlePressAC = () => {\n    this.setState({\n      screenText: \"0\",\n      dotAdded: false,\n      isPositive: true,\n      operands: [],\n      previousOperator: null,\n      operatorClicked: false,\n      resultClickedOperand: null,\n    });\n  };\n\n  handlePressDot = () => {\n    if (!this.state.dotAdded) {\n      this.setState({\n        screenText: this.state.screenText + \".\",\n        dotAdded: true,\n        operatorClicked: false,\n        resultClickedOperand: null,\n      });\n    }\n  };\n\n  handlePressNegator = () => {\n    if (this.state.isPositive) {\n      if (this.state.screenText !== \"0\") {\n        this.setState({\n          screenText: \"-\" + this.state.screenText,\n          isPositive: false,\n          operatorClicked: false,\n          resultClickedOperand: null,\n        });\n      }\n    } else {\n      this.setState({\n        screenText: this.state.screenText.slice(1),\n        isPositive: true,\n        operatorClicked: false,\n        resultClickedOperand: null,\n      });\n    }\n  };\n\n  handlePressResult = () => {\n    if (this.state.previousOperator !== null) {\n      let tempOprands = [\n        ...this.state.operands,\n        parseFloat(this.state.screenText),\n      ];\n\n      let result = 0;\n      if (this.state.resultClickedOperand === null) {\n        switch (this.state.previousOperator) {\n          case \"+\":\n            result =\n              tempOprands[tempOprands.length - 2] +\n              tempOprands[tempOprands.length - 1];\n            break;\n          case \"-\":\n            result =\n              tempOprands[tempOprands.length - 2] -\n              tempOprands[tempOprands.length - 1];\n            break;\n          case \"*\":\n            result =\n              tempOprands[tempOprands.length - 2] *\n              tempOprands[tempOprands.length - 1];\n            break;\n          case \"/\":\n            result =\n              tempOprands[tempOprands.length - 2] /\n              tempOprands[tempOprands.length - 1];\n            break;\n          case '%':\n            result = \n            tempOprands[tempOprands.length - 2] %\n            tempOprands[tempOprands.length - 1];\n          default:\n            break;\n        }\n\n        tempOprands.push(result);\n      } else {\n        switch (this.state.previousOperator) {\n          case \"+\":\n            result =\n              tempOprands[tempOprands.length - 1] +\n              this.state.resultClickedOperand;\n            break;\n          case \"-\":\n            result =\n              tempOprands[tempOprands.length - 1] -\n              this.state.resultClickedOperand;\n            break;\n          case \"*\":\n            result =\n              tempOprands[tempOprands.length - 1] *\n              this.state.resultClickedOperand;\n            break;\n          case \"/\":\n            result =\n              tempOprands[tempOprands.length - 1] /\n              this.state.resultClickedOperand;\n            break;\n          default:\n            break;\n        }\n\n        tempOprands.push(result);\n      }\n\n      this.setState({\n        operands: tempOprands,\n        resultClickedOperand:\n          this.state.resultClickedOperand === null\n            ? parseFloat(this.state.screenText)\n            : this.state.resultClickedOperand,\n        operatorClicked: false,\n        isPositive: true,\n        dotAdded: false,\n        screenText: result.toString(),\n        resultClicked: true,\n      });\n    }\n  };\n\n\n  // showScreenText = (tempOperands, tempOperators) => {\n  //   console.log('let\"s see: ', this.state.resultClicked);\n  //   let lastOperand1, lastOperand2, lastOperator;\n  //   lastOperand1 = tempOperands.length-1;\n  //   lastOperand2 = tempOperands.length-2;\n  //   lastOperator = tempOperators[tempOperators.length-1];\n  //   console.log('tempoperands in new function: ', tempOperands);\n  //   let result = 0;\n  //   switch(lastOperator){\n  //     case '+':\n  //       result = parseFloat(tempOperands[lastOperand2]) + parseFloat(tempOperands[lastOperand1]);\n  //       console.log('result in new func: ', result);\n  //       break;\n  //   }\n  //   return result.toString();\n  // }\n\n\n  handleMemory = (memory) => {\n\n    let onScreen = this.state.screenText;\n    let currentMemory = localStorage.getItem(onScreen);\n    currentMemory = parseFloat(currentMemory);\n    switch (memory) {\n      case 'm+':\n        currentMemory = parseFloat(this.state.lastMemoryKey);\n        localStorage.removeItem(currentMemory);\n        currentMemory = isNaN(currentMemory) ? parseFloat(onScreen) : currentMemory + parseFloat(onScreen);\n        localStorage.setItem(currentMemory, currentMemory);\n        this.setState({\n          lastMemoryKey: currentMemory.toString(),\n        });\n        break;\n      case 'm-':\n        currentMemory = parseFloat(this.state.lastMemoryKey);\n        localStorage.removeItem(currentMemory);\n        currentMemory = isNaN(currentMemory) ? parseFloat(onScreen) : currentMemory - parseFloat(onScreen);\n        localStorage.setItem(currentMemory, currentMemory);\n        this.setState({\n          lastMemoryKey: currentMemory.toString(),\n        });\n        break;\n      case 'mc':\n        localStorage.clear();\n        this.setState({\n          lastMemoryKey: '',\n        })\n        break;\n      case 'mr':\n        this.setState({\n          screenText: this.state.lastMemoryKey,\n        });\n        break;\n      case 'ms':\n        currentMemory = isNaN(currentMemory) ? parseFloat(onScreen) : currentMemory;\n        localStorage.setItem(currentMemory, currentMemory);\n        this.setState({\n          lastMemoryKey: currentMemory.toString(),\n        })\n        break;\n    }\n\n    this.setState({\n      memoryClicked: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Screen text={this.state.screenText} />\n        <Keypad\n          onPressDigit={this.handlePressDigit}\n          onPressOperator={this.handlePressOperator}\n          onPressAC={this.handlePressAC}\n          onPressDot={this.handlePressDot}\n          onPressNegator={this.handlePressNegator}\n          onPressResult={this.handlePressResult}\n          onPressMemory={this.handleMemory}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}